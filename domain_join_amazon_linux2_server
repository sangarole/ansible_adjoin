---

- name: Playbook for Domain joining for Amazon Linux 2 
  hosts: localhost
  gather_facts: True
  connection: localhost
  become: yes
  become_user: root

  tasks:

    - name: Test reachability to AD Server
      shell: /bin/bash -c "ping -c 3 {{ DC_NAME }}"
      register: DC_PING_STATUS
      changed_when: false
      ignore_errors: true

    - name: Setting up the hostname as per the input variable 
      hostname:
            name: "{{ host_name }}"

    - name: Install RPM packages required for domain joining
      yum:
        name: ['libselinux-python','realmd','sssd','oddjob','oddjob-mkhomedir','adcli','samba-common','samba-common-tools','python-pip']
        state: latest

    - name: Install DNSMASQ only if required
      yum:
        name: dnsmasq
        state: latest
      when: DC_PING_STATUS.rc != 0   
      
    - name: Ensure group "dnsmasq" exists
      group:
          name: dnsmasq
          state: present
      when: DC_PING_STATUS.rc != 0

    - name: Add the user 'dnsmasq' with a specific group "dnsmasq" for dnsmasq service
      user:
        name: dnsmasq
        shell: /bin/bash
        comment: User for dnsmasq
        group: dnsmasq
        createhome: no
      when: DC_PING_STATUS.rc != 0

    - name: stat /etc/dnsmasq.conf
      stat: path=/etc/dnsmasq.conf
      register: dnsmasqconf_stat
      when: DC_PING_STATUS.rc != 0

    - name: Move the file /etc/dnsmasq.conf
      command: mv /etc/dnsmasq.conf /etc/dnsmasqconf_bkp
      when: dnsmasqconf_stat.stat.exists and DC_PING_STATUS.rc != 0 

    - name: Copy dnsmasq configurations to /etc/dnsmasq.conf for resolving RDS & EFS Names
      blockinfile:
        path: /etc/dnsmasq.conf
        backup: yes
        create: yes
        mode: u=rw,g=r,o=r
        owner: root
        group: root
        block: |
            listen-address=127.0.0.1
            port=53
            bind-interfaces
            user=dnsmasq
            group=dnsmasq
            pid-file=/var/run/dnsmasq.pid
            server=/amazonaws.com/169.254.169.253
            ptr-record=253.169.254.169.in-addr.arpa,amazonaws.com
            ptr-record={{ DC_PRIMARY_IP_REVERSE }}.in-addr.arpa,{{ DOMAIN_NAME_LOWER }}
            ptr-record={{ DC_SECONDARY_IP_REVERSE }}.in-addr.arpa,{{ DOMAIN_NAME_LOWER }}

            # Name resolution options
            resolv-file=/etc/resolv.dnsmasq
            cache-size=500
            neg-ttl=60
            domain-needed
            bogus-priv
      when: DC_PING_STATUS.rc != 0
          
    - name: Copy /etc/resolv.dnsmasq for resolving our DNS servers
      blockinfile:
        path: /etc/resolv.dnsmasq
        backup: yes
        create: yes
        mode: u=rw,g=r,o=r
        owner: root
        group: root
        block: |
          nameserver {{ DC_PRIMARY_IP }}
          nameserver {{ DC_SECONDARY_IP }}
      when: DC_PING_STATUS.rc != 0

    - name: stat /etc/resolv.conf
      stat: path=/etc/resolv.conf
      register: resolvconf_stat
      when: DC_PING_STATUS.rc != 0  

    - name: Move the file /etc/resolv.conf
      command: mv /etc/resolv.conf /etc/resolvconf_bkp
      when: resolvconf_stat.stat.exists and DC_PING_STATUS.rc != 0 

    - name: Copy /etc/resolv.conf for resolving our DNS servers
      blockinfile:
        path: /etc/resolv.conf
        backup: yes
        create: yes
        mode: u=rw,g=r,o=r
        owner: root
        group: root
        block: |
            options timeout:2 attempts:5
            ; generated by /usr/sbin/dhclient-script
            search ec2.internal {{ DOMAIN_NAME_LOWER }}
            nameserver 127.0.0.1 
            nameserver {{ DC_PRIMARY_IP }}
            nameserver {{ DC_SECONDARY_IP }} 
      when: DC_PING_STATUS.rc != 0

    - name: stat /etc/dhcp/dhclient.conf
      stat: path=/etc/dhcp/dhclient.conf
      register: dhclient_stat
      when: DC_PING_STATUS.rc != 0

    - name: Move the file /etc/dhcp/dhclient.conf
      command: mv /etc/dhcp/dhclient.conf /etc/dhcp/dhclientconf_bkp
      when: dhclient_stat.stat.exists and DC_PING_STATUS.rc != 0

    - name: Copy /etc/dhcp/dhclient.conf for resolving our DNS servers
      blockinfile:
        path: /etc/dhcp/dhclient.conf
        backup: yes
        create: yes
        mode: u=rw,g=r,o=r
        owner: root
        group: root
        block: |
            timeout 300;
            supersede domain-name-servers 127.0.0.1, {{ DC_PRIMARY_IP }}, {{ DC_SECONDARY_IP }};
      when: DC_PING_STATUS.rc != 0

    - name: Restart the dnsmasq server & Then set the service to start up on boot
      systemd:
        name: dnsmasq
        enabled: yes
        state: restarted
        daemon_reload: yes

    - name: Install pexpect using pip
      pip:
        name: pexpect

    - name: Check if machine is domain joined or not
      shell: /bin/bash -c "realm list | grep sssd"
      register: realmd_bound
      changed_when: false
      ignore_errors: true

    - name: Join system to Active Directory using realm & SSSD 
      expect:
        command: /bin/bash -c "realm join --membership-software=adcli --user={{ join_user_id }}@{{ DOMAIN_NAME_UPPER }} --computer-ou="OU={{ OU_NAME }}" --os-name='{{ ansible_distribution }} {{ ansible_system }}' --os-version={{ ansible_distribution_version }} {{DC_PRIMARY_NAME }}"
        responses:
            Password for *: "{{ join_user_pass }}"
      when: realmd_bound.rc != 0

    - name: Edit /etc/ssh/sshd_config to enable password based login
      replace:
        path: /etc/ssh/sshd_config
        regexp: 'PasswordAuthentication no'
        replace: 'PasswordAuthentication yes'
        backup: yes
      notify:
        - restart sshd

    - name: Update /etc/sssd/sssd.conf as per our requirement
      blockinfile:
        path: /etc/sssd/sssd.conf
        backup: yes
        block: |
            [sssd]
            domains = {{ DOMAIN_NAME_LOWER }}
            config_file_version = 2
            services = nss, pam, ssh

            [domain/{{ DOMAIN_NAME_LOWER }}]
            ad_server = {{DC_PRIMARY_NAME }},{{ DC_SECONDARY_NAME }}
            ad_domain = {{ DOMAIN_NAME_LOWER }}
            krb5_domain = {{ DOMAIN_NAME_UPPER }}
            realmd_tags = manages-system joined-with-samba
            cache_credentials = False
            id_provider = ad
            krb5_store_password_if_offline = True
            default_shell = /bin/bash
            ldap_id_mapping = True
            use_fully_qualified_names = False
            fallback_homedir = /home/%u
            access_provider = simple
            simple_allow_user = {{ ad_users }}
            simple_allow_groups = {{ ad_groups }}
      notify:
        - restart sssd

    - name: Refreshing CS & Splunk dupicate ID at respective dashboards
      command: "{{ item }}"
      loop:
        - /opt/CrowdStrike/falconctl -d -f --aid
        - /opt/splunkforwarder/bin/splunk stop
        - /opt/splunkforwarder/bin/splunk clone-prep-clear-config
        - /opt/splunkforwarder/bin/splunk start

  handlers:
    - name: restart sssd
      service:
        name: sssd
        state: restarted

    - name: restart sshd
      service:
        name: sshd
        state: restarted
